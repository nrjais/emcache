// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/client/interfaces.go -destination=pkg/client/mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	protos "github.com/nrjais/emcache/pkg/protos"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AddCollection mocks base method.
func (m *MockClientInterface) AddCollection(ctx context.Context, collectionName string, shape *protos.Shape) (*protos.AddCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollection", ctx, collectionName, shape)
	ret0, _ := ret[0].(*protos.AddCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCollection indicates an expected call of AddCollection.
func (mr *MockClientInterfaceMockRecorder) AddCollection(ctx, collectionName, shape any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollection", reflect.TypeOf((*MockClientInterface)(nil).AddCollection), ctx, collectionName, shape)
}

// Close mocks base method.
func (m *MockClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientInterface)(nil).Close))
}

// Query mocks base method.
func (m *MockClientInterface) Query(ctx context.Context, collectionName, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockClientInterfaceMockRecorder) Query(ctx, collectionName, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClientInterface)(nil).Query), varargs...)
}

// RemoveCollection mocks base method.
func (m *MockClientInterface) RemoveCollection(ctx context.Context, collectionName string) (*protos.RemoveCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCollection", ctx, collectionName)
	ret0, _ := ret[0].(*protos.RemoveCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCollection indicates an expected call of RemoveCollection.
func (mr *MockClientInterfaceMockRecorder) RemoveCollection(ctx, collectionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCollection", reflect.TypeOf((*MockClientInterface)(nil).RemoveCollection), ctx, collectionName)
}

// StartDbUpdates mocks base method.
func (m *MockClientInterface) StartDbUpdates() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDbUpdates")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartDbUpdates indicates an expected call of StartDbUpdates.
func (mr *MockClientInterfaceMockRecorder) StartDbUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDbUpdates", reflect.TypeOf((*MockClientInterface)(nil).StartDbUpdates))
}

// StopUpdates mocks base method.
func (m *MockClientInterface) StopUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopUpdates")
}

// StopUpdates indicates an expected call of StopUpdates.
func (mr *MockClientInterfaceMockRecorder) StopUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopUpdates", reflect.TypeOf((*MockClientInterface)(nil).StopUpdates))
}

// SyncToLatest mocks base method.
func (m *MockClientInterface) SyncToLatest(ctx context.Context, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncToLatest", ctx, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncToLatest indicates an expected call of SyncToLatest.
func (mr *MockClientInterfaceMockRecorder) SyncToLatest(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncToLatest", reflect.TypeOf((*MockClientInterface)(nil).SyncToLatest), ctx, limit)
}
