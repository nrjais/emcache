// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/protos/emcache.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmcacheService_DownloadDb_FullMethodName      = "/emcache.EmcacheService/DownloadDb"
	EmcacheService_GetOplogEntries_FullMethodName = "/emcache.EmcacheService/GetOplogEntries"
	EmcacheService_AddCollection_FullMethodName   = "/emcache.EmcacheService/AddCollection"
)

// EmcacheServiceClient is the client API for EmcacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmcacheServiceClient interface {
	DownloadDb(ctx context.Context, in *DownloadDbRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadDbResponse], error)
	GetOplogEntries(ctx context.Context, in *GetOplogEntriesRequest, opts ...grpc.CallOption) (*GetOplogEntriesResponse, error)
	AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error)
}

type emcacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmcacheServiceClient(cc grpc.ClientConnInterface) EmcacheServiceClient {
	return &emcacheServiceClient{cc}
}

func (c *emcacheServiceClient) DownloadDb(ctx context.Context, in *DownloadDbRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadDbResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EmcacheService_ServiceDesc.Streams[0], EmcacheService_DownloadDb_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadDbRequest, DownloadDbResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EmcacheService_DownloadDbClient = grpc.ServerStreamingClient[DownloadDbResponse]

func (c *emcacheServiceClient) GetOplogEntries(ctx context.Context, in *GetOplogEntriesRequest, opts ...grpc.CallOption) (*GetOplogEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOplogEntriesResponse)
	err := c.cc.Invoke(ctx, EmcacheService_GetOplogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emcacheServiceClient) AddCollection(ctx context.Context, in *AddCollectionRequest, opts ...grpc.CallOption) (*AddCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCollectionResponse)
	err := c.cc.Invoke(ctx, EmcacheService_AddCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmcacheServiceServer is the server API for EmcacheService service.
// All implementations must embed UnimplementedEmcacheServiceServer
// for forward compatibility.
type EmcacheServiceServer interface {
	DownloadDb(*DownloadDbRequest, grpc.ServerStreamingServer[DownloadDbResponse]) error
	GetOplogEntries(context.Context, *GetOplogEntriesRequest) (*GetOplogEntriesResponse, error)
	AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionResponse, error)
	mustEmbedUnimplementedEmcacheServiceServer()
}

// UnimplementedEmcacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmcacheServiceServer struct{}

func (UnimplementedEmcacheServiceServer) DownloadDb(*DownloadDbRequest, grpc.ServerStreamingServer[DownloadDbResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadDb not implemented")
}
func (UnimplementedEmcacheServiceServer) GetOplogEntries(context.Context, *GetOplogEntriesRequest) (*GetOplogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOplogEntries not implemented")
}
func (UnimplementedEmcacheServiceServer) AddCollection(context.Context, *AddCollectionRequest) (*AddCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollection not implemented")
}
func (UnimplementedEmcacheServiceServer) mustEmbedUnimplementedEmcacheServiceServer() {}
func (UnimplementedEmcacheServiceServer) testEmbeddedByValue()                        {}

// UnsafeEmcacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmcacheServiceServer will
// result in compilation errors.
type UnsafeEmcacheServiceServer interface {
	mustEmbedUnimplementedEmcacheServiceServer()
}

func RegisterEmcacheServiceServer(s grpc.ServiceRegistrar, srv EmcacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmcacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmcacheService_ServiceDesc, srv)
}

func _EmcacheService_DownloadDb_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDbRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmcacheServiceServer).DownloadDb(m, &grpc.GenericServerStream[DownloadDbRequest, DownloadDbResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EmcacheService_DownloadDbServer = grpc.ServerStreamingServer[DownloadDbResponse]

func _EmcacheService_GetOplogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOplogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmcacheServiceServer).GetOplogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmcacheService_GetOplogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmcacheServiceServer).GetOplogEntries(ctx, req.(*GetOplogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmcacheService_AddCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmcacheServiceServer).AddCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmcacheService_AddCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmcacheServiceServer).AddCollection(ctx, req.(*AddCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmcacheService_ServiceDesc is the grpc.ServiceDesc for EmcacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmcacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emcache.EmcacheService",
	HandlerType: (*EmcacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOplogEntries",
			Handler:    _EmcacheService_GetOplogEntries_Handler,
		},
		{
			MethodName: "AddCollection",
			Handler:    _EmcacheService_AddCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadDb",
			Handler:       _EmcacheService_DownloadDb_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/protos/emcache.proto",
}
