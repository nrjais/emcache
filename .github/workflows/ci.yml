name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  rust-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  go-client-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clients/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: clients/go/go.sum

      - name: Download dependencies
        run: go mod download

  build:
    runs-on: ubuntu-latest
    needs: [rust-test, go-client-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build release binary
        run: cargo build --release

      - name: Build Docker image
        run: docker build -t emcache:latest .

  integration-tests:
    runs-on: ubuntu-latest
    needs: [rust-test, go-client-test]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: emcache
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: clients/go/go.sum

      - name: Start MongoDB with replica set
        run: |
          docker run -d --name mongo \
            -p 27017:27017 \
            mongo:8 \
            mongod --replSet rs0 --bind_ip_all --port 27017

          # Wait for MongoDB to start
          for i in {1..30}; do
            if docker exec mongo mongosh --eval "db.adminCommand('ping')" --quiet; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done

      - name: Initialize MongoDB replica set
        run: |
          docker exec mongo mongosh --eval "
            rs.initiate({
              _id: 'rs0',
              members: [{ _id: 0, host: 'localhost:27017' }]
            });
          "

      - name: Wait for MongoDB replica set
        run: |
          for i in {1..30}; do
            if docker exec mongo mongosh --eval "rs.status().ok" --quiet; then
              echo "MongoDB replica set is ready"
              break
            fi
            echo "Waiting for MongoDB replica set... ($i/30)"
            sleep 2
          done

      - name: Create test configuration
        run: |
          cat > config.toml << EOF
          [server]
          host = "127.0.0.1"
          port = 8080
          shutdown_timeout = 30.0

          [logging]
          level = "info"

          [database.postgres]
          uri = "postgres://postgres:password@localhost:5432/emcache"
          max_connections = 10
          min_connections = 1
          connection_timeout = 30.0

          [sources.main]
          uri = "mongodb://localhost:27017/?replicaSet=rs0&directConnection=true"
          database = "test"

          [cache]
          base_dir = "./cache"
          replication_interval = 1.0
          entity_refresh_interval = 30.0

          [snapshot]
          check_interval = 300.0
          min_lag = 1000
          EOF

      - name: Build emcache server
        run: cargo build --release

      - name: Start emcache server
        run: |
          ./target/release/emcache &
          echo $! > emcache.pid
          # Wait for server to start
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/health 2>/dev/null; then
              echo "Emcache server is ready"
              break
            fi
            echo "Waiting for emcache server... ($i/30)"
            sleep 2
          done

      - name: Run Go client tests
        working-directory: clients/go
        run: go test -v ./...

      - name: Stop services
        if: always()
        run: |
          if [ -f emcache.pid ]; then
            kill $(cat emcache.pid) || true
            rm emcache.pid
          fi
          docker stop mongo || true
          docker rm mongo || true
